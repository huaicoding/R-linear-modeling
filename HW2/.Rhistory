GeneratePSDsqrtCholDecomp <- function(s_mat) {
cho = chol(s_mat)
return(t(cho))
}
CheckSqrtTrans <- function(a, b) {
AssertMatricesEqual(t(a) %*% a, b)
print("You've passed the test!")
}
psd_mat <- GeneratePSDMatrix(4)
psd_mat_sqrt <- GeneratePSDsqrtCholDecomp(psd_mat)
print(psd_mat)
print(t(psd_mat_sqrt) %*% psd_mat_sqrt)
print(psd_mat_sqrt)
print(GeneratePSDsqrt(psd_mat))
CheckSqrtTrans(psd_mat_sqrt, psd_mat)
GeneratePSDsqrtCholDecomp <- function(s_mat) {
cho = chol(s_mat)
return(cho)
}
CheckSqrtTrans <- function(a, b) {
AssertMatricesEqual(t(a) %*% a, b)
print("You've passed the test!")
}
psd_mat <- GeneratePSDMatrix(4)
psd_mat_sqrt <- GeneratePSDsqrtCholDecomp(psd_mat)
print(psd_mat)
print(t(psd_mat_sqrt) %*% psd_mat_sqrt)
print(psd_mat_sqrt)
print(GeneratePSDsqrt(psd_mat))
CheckSqrtTrans(psd_mat_sqrt, psd_mat)
GeneratePSDsqrtCholDecomp <- function(s_mat) {
cho = chol(s_mat)
return(cho)
}
CheckSqrtTrans <- function(a, b) {
AssertMatricesEqual(t(a) %*% a, b)
print("You've passed the test!")
}
psd_mat <- GeneratePSDMatrix(4)
psd_mat_sqrt <- GeneratePSDsqrtCholDecomp(psd_mat)
CheckSqrtTrans(psd_mat_sqrt, psd_mat)
GeneratePSDsqrtCholDecomp <- function(s_mat) {
cho = chol(s_mat)
return(cho)
}
CheckSqrtTrans <- function(a, b) {
AssertMatricesEqual(t(a) %*% a, b)
print("You've passed the test!")
}
psd_mat <- GeneratePSDMatrix(4)
psd_mat_sqrt <- GeneratePSDsqrtCholDecomp(psd_mat)
CheckSqrtTrans(psd_mat_sqrt, psd_mat)
GeneratePSDsqrtCholDecomp <- function(s_mat) {
cho = chol(s_mat)
return(cho)
}
CheckSqrtTrans <- function(a, b) {
AssertMatricesEqual(t(a) %*% a, b)
print("You've passed the test!")
}
psd_mat <- GeneratePSDMatrix(4)
psd_mat_sqrt <- GeneratePSDsqrtCholDecomp(psd_mat)
CheckSqrtTrans(psd_mat_sqrt, psd_mat)
GeneratePSDsqrtCholDecomp <- function(s_mat) {
cho = chol(s_mat)
return(cho)
}
CheckSqrtTrans <- function(a, b) {
AssertMatricesEqual(t(a) %*% a, b)
print("You've passed the test!")
}
psd_mat <- GeneratePSDMatrix(4)
psd_mat_sqrt <- GeneratePSDsqrtCholDecomp(psd_mat)
CheckSqrtTrans(psd_mat_sqrt, psd_mat)
GeneratePSDsqrtCholDecomp <- function(s_mat) {
cho = chol(s_mat)
return(cho)
}
CheckSqrtTrans <- function(a, b) {
AssertMatricesEqual(t(a) %*% a, b)
print("You've passed the test!")
}
psd_mat <- GeneratePSDMatrix(4)
psd_mat_sqrt <- GeneratePSDsqrtCholDecomp(psd_mat)
CheckSqrtTrans(psd_mat_sqrt, psd_mat)
GeneratePSDsqrtCholDecomp <- function(s_mat) {
cho = chol(s_mat)
return(cho)
}
CheckSqrtTrans <- function(a, b) {
AssertMatricesEqual(t(a) %*% a, b)
print("You've passed the test!")
}
psd_mat <- GeneratePSDMatrix(4)
psd_mat_sqrt <- GeneratePSDsqrtCholDecomp(psd_mat)
CheckSqrtTrans(psd_mat_sqrt, psd_mat)
GeneratePSDsqrtCholDecomp <- function(s_mat) {
cho = chol(s_mat)
return(cho)
}
CheckSqrtTrans <- function(a, b) {
AssertMatricesEqual(t(a) %*% a, b)
print("You've passed the test!")
}
psd_mat <- GeneratePSDMatrix(4)
psd_mat_sqrt <- GeneratePSDsqrtCholDecomp(psd_mat)
CheckSqrtTrans(psd_mat_sqrt, psd_mat)
GeneratProjCom <- function(X) {
proj_X <- X %*% solve(t(X) %*% X) %*% t(X)
proj_X_com <- diag(reg(1, dim(Proj_X))) - proj_X
return(proj_X_com)
}
CheckProjCom <- function(P, PT, y) {
proj_y = P %*% y
proj_y_com = PT %*% y
AssertMatricesEqual(proj_y + proj_y_com, y)
print("You've passed the test!")
}
X <- GenerateMatrix(5, 3)
P <- GenerateProj(X)
PC <- GeneratProjCom(X)
GeneratProjCom <- function(X) {
proj_X <- X %*% solve(t(X) %*% X) %*% t(X)
proj_X_com <- diag(rep(1, dim(Proj_X))) - proj_X
return(proj_X_com)
}
CheckProjCom <- function(P, PT, y) {
proj_y = P %*% y
proj_y_com = PT %*% y
AssertMatricesEqual(proj_y + proj_y_com, y)
print("You've passed the test!")
}
X <- GenerateMatrix(5, 3)
P <- GenerateProj(X)
PC <- GeneratProjCom(X)
GeneratProjCom <- function(X) {
proj_X <- X %*% solve(t(X) %*% X) %*% t(X)
proj_X_com <- diag(rep(1, dim(Proj_X))) - proj_X
return(proj_X_com)
}
CheckProjCom <- function(P, PT, y) {
proj_y = P %*% y
proj_y_com = PT %*% y
AssertMatricesEqual(proj_y + proj_y_com, y)
print("You've passed the test!")
}
X <- GenerateMatrix(5, 3)
P <- GenerateProj(X)
PC <- GeneratProjCom(X)
GeneratProjCom <- function(X) {
proj_X <- X %*% solve(t(X) %*% X) %*% t(X)
print(proj_X)
proj_X_com <- diag(rep(1, dim(Proj_X))) - proj_X
return(proj_X_com)
}
CheckProjCom <- function(P, PT, y) {
proj_y = P %*% y
proj_y_com = PT %*% y
AssertMatricesEqual(proj_y + proj_y_com, y)
print("You've passed the test!")
}
X <- GenerateMatrix(5, 3)
P <- GenerateProj(X)
PC <- GeneratProjCom(X)
GeneratProjCom <- function(X) {
proj_X <- X %*% solve(t(X) %*% X) %*% t(X)
print(dim(proj_X))
proj_X_com <- diag(rep(1, dim(Proj_X))) - proj_X
return(proj_X_com)
}
CheckProjCom <- function(P, PT, y) {
proj_y = P %*% y
proj_y_com = PT %*% y
AssertMatricesEqual(proj_y + proj_y_com, y)
print("You've passed the test!")
}
X <- GenerateMatrix(5, 3)
P <- GenerateProj(X)
PC <- GeneratProjCom(X)
GeneratProjCom <- function(X) {
proj_X <- X %*% solve(t(X) %*% X) %*% t(X)
print(dim(proj_X)[1])
proj_X_com <- diag(rep(1, dim(Proj_X)[1])) - proj_X
return(proj_X_com)
}
CheckProjCom <- function(P, PT, y) {
proj_y = P %*% y
proj_y_com = PT %*% y
AssertMatricesEqual(proj_y + proj_y_com, y)
print("You've passed the test!")
}
X <- GenerateMatrix(5, 3)
P <- GenerateProj(X)
PC <- GeneratProjCom(X)
GeneratProjCom <- function(X) {
proj_X <- X %*% solve(t(X) %*% X) %*% t(X)
proj_X_com <- diag(rep(1, dim(Proj_X)[1])) - proj_X
return(proj_X_com)
}
CheckProjCom <- function(P, PT, y) {
proj_y = P %*% y
proj_y_com = PT %*% y
AssertMatricesEqual(proj_y + proj_y_com, y)
print("You've passed the test!")
}
X <- GenerateMatrix(5, 3)
P <- GenerateProj(X)
PC <- GeneratProjCom(X)
GeneratProjCom <- function(X) {
proj_X <- X %*% solve(t(X) %*% X) %*% t(X)
proj_X_com <- diag(rep(1, dim(proj_X)[1])) - proj_X
return(proj_X_com)
}
CheckProjCom <- function(P, PT, y) {
proj_y = P %*% y
proj_y_com = PT %*% y
AssertMatricesEqual(proj_y + proj_y_com, y)
print("You've passed the test!")
}
X <- GenerateMatrix(5, 3)
P <- GenerateProj(X)
PC <- GeneratProjCom(X)
y = rnorm(3)
CheckProjCom(P, PC, y)
GeneratProjCom <- function(X) {
proj_X <- X %*% solve(t(X) %*% X) %*% t(X)
proj_X_com <- diag(rep(1, dim(proj_X)[1])) - proj_X
return(proj_X_com)
}
CheckProjCom <- function(P, PT, y) {
proj_y = P %*% y
proj_y_com = PT %*% y
AssertMatricesEqual(proj_y + proj_y_com, y)
print("You've passed the test!")
}
X <- GenerateMatrix(5, 3)
P <- GenerateProj(X)
PC <- GeneratProjCom(X)
y = rnorm(3)
print(y)
CheckProjCom(P, PC, y)
GeneratProjCom <- function(X) {
proj_X <- X %*% solve(t(X) %*% X) %*% t(X)
proj_X_com <- diag(rep(1, dim(proj_X)[1])) - proj_X
return(proj_X_com)
}
CheckProjCom <- function(P, PT, y) {
proj_y = P %*% y
proj_y_com = PT %*% y
AssertMatricesEqual(proj_y + proj_y_com, y)
print("You've passed the test!")
}
X <- GenerateMatrix(5, 3)
P <- GenerateProj(X)
PC <- GeneratProjCom(X)
y = rnorm(5)
print(y)
CheckProjCom(P, PC, y)
GeneratProjCom <- function(X) {
proj_X <- X %*% solve(t(X) %*% X) %*% t(X)
proj_X_com <- diag(rep(1, dim(proj_X)[1])) - proj_X
return(proj_X_com)
}
CheckProjCom <- function(P, PT, y) {
proj_y = P %*% y
proj_y_com = PT %*% y
AssertMatricesEqual(proj_y + proj_y_com, y)
print("You've passed the test!")
}
X <- GenerateMatrix(5, 3)
P <- GenerateProj(X)
PC <- GeneratProjCom(X)
y = rnorm(5)
print(y)
CheckProjCom(P, PC, y)
GeneratProjCom <- function(X) {
proj_X <- X %*% solve(t(X) %*% X) %*% t(X)
proj_X_com <- diag(rep(1, dim(proj_X)[1])) - proj_X
return(proj_X_com)
}
CheckProjCom <- function(P, PT, y) {
proj_y = P %*% y
proj_y_com = PT %*% y
AssertMatricesEqual(proj_y + proj_y_com, y)
print("You've passed the test!")
}
X <- GenerateMatrix(5, 3)
P <- GenerateProj(X)
PC <- GeneratProjCom(X)
y = rnorm(5)
print(y)
CheckProjCom(P, PC, y)
GeneratProjCom <- function(X) {
proj_X <- X %*% solve(t(X) %*% X) %*% t(X)
proj_X_com <- diag(rep(1, dim(proj_X)[1])) - proj_X
return(proj_X_com)
}
CheckProjCom <- function(P, PT, y) {
proj_y = P %*% y
proj_y_com = PT %*% y
AssertMatricesEqual(proj_y + proj_y_com, y)
print("You've passed the test!")
}
X <- GenerateMatrix(5, 3)
P <- GenerateProj(X)
PC <- GeneratProjCom(X)
y = rnorm(5)
print(y)
CheckProjCom(P, PC, y)
GeneratProjCom <- function(X) {
proj_X <- X %*% solve(t(X) %*% X) %*% t(X)
proj_X_com <- diag(rep(1, dim(proj_X)[1])) - proj_X
return(proj_X_com)
}
CheckProjCom <- function(P, PT, y) {
proj_y = P %*% y
proj_y_com = PT %*% y
AssertMatricesEqual(proj_y + proj_y_com, y)
print("You've passed the test!")
}
X <- GenerateMatrix(5, 3)
P <- GenerateProj(X)
PC <- GeneratProjCom(X)
y = rnorm(5)
print(y)
CheckProjCom(P, PC, y)
GeneratProjCom <- function(X) {
proj_X <- X %*% solve(t(X) %*% X) %*% t(X)
proj_X_com <- diag(rep(1, dim(proj_X)[1])) - proj_X
return(proj_X_com)
}
CheckProjCom <- function(P, PT, y) {
proj_y = P %*% y
proj_y_com = PT %*% y
AssertMatricesEqual(proj_y + proj_y_com, y)
print("You've passed the test!")
}
X <- GenerateMatrix(5, 3)
P <- GenerateProj(X)
PC <- GeneratProjCom(X)
y = rnorm(5)
print(y)
CheckProjCom(P, PC, y)
GeneratProjCom <- function(X) {
proj_X <- X %*% solve(t(X) %*% X) %*% t(X)
proj_X_com <- diag(rep(1, dim(proj_X)[1])) - proj_X
return(proj_X_com)
}
CheckProjCom <- function(P, PT, y) {
proj_y = P %*% y
proj_y_com = PT %*% y
AssertMatricesEqual(proj_y + proj_y_com, y)
print("You've passed the test!")
}
X <- GenerateMatrix(5, 3)
P <- GenerateProj(X)
PC <- GeneratProjCom(X)
y = rnorm(5)
CheckProjCom(P, PC, y)
### Question 6
```{r}
GenerateOrthoBasis <- function(X) {
X_QR <- qr(X)
return(qr.Q(X_QR))
}
CheckOrtho <- function(X) {
print(dim(X))
AssertMatricesEqual(t(X) * X, diag(rep(1,dim(X)[2])))
}
X <- GenerateMatrix(5, 3)
ortho_basis <- GenerateOrthoBasis(X)
CheckOrtho(X)
GenerateOrthoBasis <- function(X) {
X_QR <- qr(X)
return(qr.Q(X_QR))
}
CheckOrtho <- function(X) {
print(dim(X))
AssertMatricesEqual(t(X) %*% X, diag(rep(1,dim(X)[2])))
}
X <- GenerateMatrix(5, 3)
ortho_basis <- GenerateOrthoBasis(X)
CheckOrtho(X)
GenerateOrthoBasis <- function(X) {
X_QR <- qr(X)
return(qr.Q(X_QR))
}
CheckOrtho <- function(X) {
print(t(X) %*% X)
AssertMatricesEqual(t(X) %*% X, diag(rep(1,dim(X)[2])))
}
X <- GenerateMatrix(5, 3)
ortho_basis <- GenerateOrthoBasis(X)
CheckOrtho(X)
# Function to compute an orthonormal basis for the column span of a matrix
orthonormal_basis <- function(A) {
# Apply Gram-Schmidt orthogonalization
A_qr <- qr(A)
# Extract the orthonormal basis from the QR decomposition
Q <- qr.Q(A_qr)
return(Q)
}
# Example usage:
# Create a non-square matrix A (you can replace this with your own matrix)
A <- matrix(c(1, 1, 1, 1, 0, 2), nrow = 3)
# Compute the orthonormal basis
orth_basis <- orthonormal_basis(A)
# Print the result
print("Orthonormal Basis:")
print(orth_basis)
CheckOrtho(orth_basis)
GenerateOrthoBasis <- function(X) {
X_QR <- qr(X)
return(qr.Q(X_QR))
}
CheckOrtho <- function(X) {
print(t(X) %*% X)
AssertMatricesEqual(t(X) %*% X, diag(rep(1,dim(X)[2])))
}
X <- GenerateMatrix(2, 3)
ortho_basis <- GenerateOrthoBasis(X)
CheckOrtho(X)
GenerateOrthoBasis <- function(X) {
A_qr <- qr(X)
Q <- qr.Q(A_qr)
return(Q)
}
CheckOrtho <- function(X) {
print(t(X) %*% X)
AssertMatricesEqual(t(X) %*% X, diag(rep(1,dim(X)[2])))
}
X <- GenerateMatrix(5, 3)
ortho_basis <- GenerateOrthoBasis(X)
CheckOrtho(X)
GenerateOrthoBasis <- function(X) {
A_qr <- qr(X)
Q <- qr.Q(A_qr)
return(Q)
}
CheckOrtho <- function(X) {
print(t(X) %*% X)
AssertMatricesEqual(t(X) %*% X, diag(rep(1,dim(X)[2])))
}
X <- GenerateMatrix(5, 3)
ortho_basis <- GenerateOrthoBasis(X)
CheckOrtho(orth_basis)
GenerateOrthoBasis <- function(X) {
X_qr <- qr(X)
return(qr.Q(X_qr))
}
CheckOrtho <- function(X) {
AssertMatricesEqual(t(X) %*% X, diag(rep(1,dim(X)[2])))
print("You've passed the test!")
}
X <- GenerateMatrix(5, 3)
ortho_basis <- GenerateOrthoBasis(X)
CheckOrtho(orth_basis)
GenerateOrthoBasis <- function(X) {
X_qr <- qr(X)
return(qr.Q(X_qr))
}
CheckOrtho <- function(X) {
AssertMatricesEqual(t(X) %*% X, diag(rep(1,dim(X)[2])))
print("You've passed the test!")
}
X <- GenerateMatrix(5, 3)
ortho_basis <- GenerateOrthoBasis(X)
CheckOrtho(orth_basis)
GenerateOrthoBasis <- function(X) {
X_qr <- qr(X)
return(qr.Q(X_qr))
}
CheckOrtho <- function(X) {
AssertMatricesEqual(t(X) %*% X, diag(rep(1,dim(X)[2])))
print("You've passed the test!")
}
X <- GenerateMatrix(5, 3)
ortho_basis <- GenerateOrthoBasis(X)
CheckOrtho(orth_basis)
GenerateOrthoBasis <- function(X) {
X_qr <- qr(X)
return(qr.Q(X_qr))
}
CheckOrtho <- function(X) {
AssertMatricesEqual(t(X) %*% X, diag(rep(1,dim(X)[2])))
print("You've passed the test!")
}
X <- GenerateMatrix(5, 3)
ortho_basis <- GenerateOrthoBasis(X)
CheckOrtho(orth_basis)
GenerateOrthoBasis <- function(X) {
X_qr <- qr(X)
return(qr.Q(X_qr))
}
CheckOrtho <- function(X) {
AssertMatricesEqual(t(X) %*% X, diag(rep(1,dim(X)[2])))
print("You've passed the test!")
}
X <- GenerateMatrix(5, 3)
ortho_basis <- GenerateOrthoBasis(X)
CheckOrtho(orth_basis)
GenerateOrthoBasis <- function(X) {
X_qr <- qr(X)
return(qr.Q(X_qr))
}
CheckOrtho <- function(X) {
AssertMatricesEqual(t(X) %*% X, diag(rep(1,dim(X)[2])))
print("You've passed the test!")
}
X <- GenerateMatrix(5, 3)
ortho_basis <- GenerateOrthoBasis(X)
CheckOrtho(orth_basis)
